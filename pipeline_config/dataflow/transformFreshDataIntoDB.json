{
	"name": "transformFreshDataIntoDB",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "freshMetadataSize",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DB_dataset",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "flatten1"
				},
				{
					"name": "flatten2"
				},
				{
					"name": "flatten3"
				},
				{
					"name": "unrollByTaxes"
				},
				{
					"name": "unrollByPayments"
				}
			],
			"scriptLines": [
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> source1",
				"source1 foldDown(unroll(checks),",
				"     mapColumn(",
				"          id,",
				"          name,",
				"          deleted,",
				"          locationId,",
				"          orderTypeId,",
				"          orderTypeName,",
				"          createdByEmployeeId,",
				"          createdByEmployeeName,",
				"          businessDate,",
				"          createdAt,",
				"          closedAt,",
				"          orderNumber,",
				"          tableNumber,",
				"          scheduled,",
				"          releasedAt,",
				"          totalAmount,",
				"          balanceDueAmount,",
				"          checksGratuityAmount = checks.gratuityAmount,",
				"          checksTotalAmount = checks.totalAmount,",
				"          paymentsAmount = checks.paymentsAmount,",
				"          balanceAmount = checks.balanceAmount,",
				"          guests = checks.guests,",
				"          payments = checks.payments,",
				"          updatedAt,",
				"          teamId,",
				"          dayPart,",
				"          customer",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"flatten1 foldDown(unroll(guests),",
				"     mapColumn(",
				"          id,",
				"          name,",
				"          deleted,",
				"          locationId,",
				"          orderTypeId,",
				"          orderTypeName,",
				"          createdByEmployeeId,",
				"          createdByEmployeeName,",
				"          businessDate,",
				"          createdAt,",
				"          closedAt,",
				"          orderNumber,",
				"          tableNumber,",
				"          scheduled,",
				"          releasedAt,",
				"          totalAmount,",
				"          balanceDueAmount,",
				"          checksGratuityAmount,",
				"          checksTotalAmount,",
				"          paymentsAmount,",
				"          balanceAmount,",
				"          guestsName = guests.name,",
				"          items = guests.items,",
				"          payments,",
				"          updatedAt,",
				"          teamId,",
				"          dayPart,",
				"          customer",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten2",
				"flatten2 foldDown(unroll(items),",
				"     mapColumn(",
				"          id,",
				"          name,",
				"          deleted,",
				"          locationId,",
				"          orderTypeId,",
				"          orderTypeName,",
				"          createdByEmployeeId,",
				"          createdByEmployeeName,",
				"          businessDate,",
				"          createdAt,",
				"          closedAt,",
				"          orderNumber,",
				"          tableNumber,",
				"          scheduled,",
				"          releasedAt,",
				"          totalAmount,",
				"          balanceDueAmount,",
				"          checksGratuityAmount,",
				"          checksTotalAmount,",
				"          paymentsAmount,",
				"          balanceAmount,",
				"          guestsName,",
				"          menuItemId = items.menuItemId,",
				"          itemName = items.name,",
				"          itemCreatedAt = items.createdAt,",
				"          quantity = items.quantity,",
				"          preDiscountsAmount = items.preDiscountsAmount,",
				"          discountsAmount = items.discountsAmount,",
				"          postDiscountsAmount = items.postDiscountsAmount,",
				"          taxesAmount = items.taxesAmount,",
				"          itemTotalAmount = items.totalAmount,",
				"          void = items.void,",
				"          taxes = items.taxes,",
				"          modifiers = items.modifiers,",
				"          payments,",
				"          customer,",
				"          updatedAt,",
				"          teamId,",
				"          dayPart",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten3",
				"flatten3 foldDown(unroll(taxes),",
				"     mapColumn(",
				"          id,",
				"          name,",
				"          deleted,",
				"          locationId,",
				"          orderTypeId,",
				"          orderTypeName,",
				"          createdByEmployeeId,",
				"          createdByEmployeeName,",
				"          businessDate,",
				"          createdAt,",
				"          closedAt,",
				"          orderNumber,",
				"          tableNumber,",
				"          scheduled,",
				"          releasedAt,",
				"          totalAmount,",
				"          balanceDueAmount,",
				"          checksGratuityAmount,",
				"          checksTotalAmount,",
				"          paymentsAmount,",
				"          balanceAmount,",
				"          guestsName,",
				"          menuItemId,",
				"          itemName,",
				"          itemCreatedAt,",
				"          quantity,",
				"          preDiscountsAmount,",
				"          discountsAmount,",
				"          postDiscountsAmount,",
				"          taxesAmount,",
				"          itemTotalAmount,",
				"          void,",
				"          taxid = taxes.taxId,",
				"          taxName = taxes.taxName,",
				"          percentage = taxes.percentage,",
				"          isInclusive = taxes.isInclusive,",
				"          amount = taxes.amount,",
				"          modifiers,",
				"          payments,",
				"          customer,",
				"          updatedAt,",
				"          teamId,",
				"          dayPart",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> unrollByTaxes",
				"unrollByTaxes foldDown(unroll(payments),",
				"     mapColumn(",
				"          id,",
				"          name,",
				"          deleted,",
				"          locationId,",
				"          orderTypeId,",
				"          orderTypeName,",
				"          createdByEmployeeId,",
				"          createdByEmployeeName,",
				"          businessDate,",
				"          createdAt,",
				"          closedAt,",
				"          orderNumber,",
				"          tableNumber,",
				"          scheduled,",
				"          releasedAt,",
				"          totalAmount,",
				"          balanceDueAmount,",
				"          checksGratuityAmount,",
				"          checksTotalAmount,",
				"          paymentsAmount,",
				"          balanceAmount,",
				"          guestsName,",
				"          menuItemId,",
				"          itemName,",
				"          itemCreatedAt,",
				"          quantity,",
				"          preDiscountsAmount,",
				"          discountsAmount,",
				"          postDiscountsAmount,",
				"          taxesAmount,",
				"          itemTotalAmount,",
				"          void,",
				"          taxid,",
				"          taxName,",
				"          percentage,",
				"          isInclusive,",
				"          taxAmount = amount,",
				"          paymentOptionID = payments.paymentOptionId,",
				"          paymentName = payments.paymentName,",
				"          paymentCreatedAt = payments.createdAt,",
				"          paymentBusinessDate = payments.businessDate,",
				"          paymentAmount = payments.amount,",
				"          surchargesAmount = payments.surchargesAmount,",
				"          tipAmount = payments.tipAmount,",
				"          tipDeductionAmount = payments.tipDeductionAmount,",
				"          tipAppliedToEmployeeId = payments.tipAppliedToEmployeeId,",
				"          stationId = payments.stationId,",
				"          employeeId = payments.employeeId,",
				"          employeeName = payments.employeeName,",
				"          cardType = payments.cardType,",
				"          cardNumber = payments.cardNumber,",
				"          cardholderName = payments.cardholderName,",
				"          updatedAt,",
				"          teamId,",
				"          dayPart",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> unrollByPayments",
				"unrollByPayments sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          each(match(/* All input columns */true()),",
				"               /* Input name */$$ = $$)",
				"     )) ~> sink1"
			]
		}
	}
}