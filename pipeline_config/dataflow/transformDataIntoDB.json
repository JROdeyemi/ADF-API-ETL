{
	"name": "transformDataIntoDB",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "metadataSize",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DB_dataset",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "flatten1"
				},
				{
					"name": "flatten2"
				},
				{
					"name": "flatten3"
				},
				{
					"name": "unrollByTaxes"
				},
				{
					"name": "unrollByPayments"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as string,",
				"          name as string,",
				"          deleted as boolean,",
				"          locationId as string,",
				"          orderTypeId as string,",
				"          orderTypeName as string,",
				"          createdByEmployeeId as string,",
				"          createdByEmployeeName as string,",
				"          businessDate as string,",
				"          createdAt as string,",
				"          closedAt as string,",
				"          orderNumber as string,",
				"          tableNumber as string,",
				"          scheduled as boolean,",
				"          releasedAt as string,",
				"          ownerInfo as (employeeId as string, employeeName as string, jobPositionId as string),",
				"          totalAmount as string,",
				"          balanceDueAmount as string,",
				"          checks as (gratuityAmount as string, totalAmount as string, paymentsAmount as string, balanceAmount as string, items as string[], voidedItems as string[], guests as (name as string, items as (menuItemId as string, name as string, createdAt as string, quantity as string, preDiscountsAmount as string, discountsAmount as string, postDiscountsAmount as string, taxesAmount as string, totalAmount as string, discounts as string[], taxes as (taxId as string, taxName as string, percentage as string, isInclusive as boolean, amount as string)[], void as string, subItems as string[], modifiers as (modifierId as string, modifierOptionId as string, text as string, preDiscountsAmount as string, discountsAmount as string, postDiscountsAmount as string, taxesAmount as string, totalAmount as string, discounts as string[], taxes as (taxId as string, taxName as string, percentage as string, isInclusive as boolean, amount as string)[])[], giftCardIssueReload as boolean)[], voidedItems as string[])[], surcharges as string[], payments as (paymentOptionId as string, paymentName as string, createdAt as string, businessDate as string, amount as string, surcharges as string[], surchargesAmount as string, tipAmount as string, tipDeductionAmount as string, tipAppliedToEmployeeId as string, stationId as string, employeeId as string, employeeName as string, cardType as string, cardNumber as string, cardholderName as string)[], autoGratuityTaxes as string[])[],",
				"          updatedAt as string,",
				"          teamId as string,",
				"          dayPart as string,",
				"          customer as (phone as string)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> source1",
				"source1 foldDown(unroll(checks),",
				"     mapColumn(",
				"          id,",
				"          name,",
				"          deleted,",
				"          locationId,",
				"          orderTypeId,",
				"          orderTypeName,",
				"          createdByEmployeeId,",
				"          createdByEmployeeName,",
				"          businessDate,",
				"          createdAt,",
				"          closedAt,",
				"          orderNumber,",
				"          tableNumber,",
				"          scheduled,",
				"          releasedAt,",
				"          totalAmount,",
				"          balanceDueAmount,",
				"          checksGratuityAmount = checks.gratuityAmount,",
				"          checksTotalAmount = checks.totalAmount,",
				"          paymentsAmount = checks.paymentsAmount,",
				"          balanceAmount = checks.balanceAmount,",
				"          guests = checks.guests,",
				"          payments = checks.payments,",
				"          updatedAt,",
				"          teamId,",
				"          dayPart,",
				"          customer",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"flatten1 foldDown(unroll(guests),",
				"     mapColumn(",
				"          id,",
				"          name,",
				"          deleted,",
				"          locationId,",
				"          orderTypeId,",
				"          orderTypeName,",
				"          createdByEmployeeId,",
				"          createdByEmployeeName,",
				"          businessDate,",
				"          createdAt,",
				"          closedAt,",
				"          orderNumber,",
				"          tableNumber,",
				"          scheduled,",
				"          releasedAt,",
				"          totalAmount,",
				"          balanceDueAmount,",
				"          checksGratuityAmount,",
				"          checksTotalAmount,",
				"          paymentsAmount,",
				"          balanceAmount,",
				"          guestsName = guests.name,",
				"          items = guests.items,",
				"          payments,",
				"          updatedAt,",
				"          teamId,",
				"          dayPart,",
				"          customer",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten2",
				"flatten2 foldDown(unroll(items),",
				"     mapColumn(",
				"          id,",
				"          name,",
				"          deleted,",
				"          locationId,",
				"          orderTypeId,",
				"          orderTypeName,",
				"          createdByEmployeeId,",
				"          createdByEmployeeName,",
				"          businessDate,",
				"          createdAt,",
				"          closedAt,",
				"          orderNumber,",
				"          tableNumber,",
				"          scheduled,",
				"          releasedAt,",
				"          totalAmount,",
				"          balanceDueAmount,",
				"          checksGratuityAmount,",
				"          checksTotalAmount,",
				"          paymentsAmount,",
				"          balanceAmount,",
				"          guestsName,",
				"          menuItemId = items.menuItemId,",
				"          itemName = items.name,",
				"          itemCreatedAt = items.createdAt,",
				"          quantity = items.quantity,",
				"          preDiscountsAmount = items.preDiscountsAmount,",
				"          discountsAmount = items.discountsAmount,",
				"          postDiscountsAmount = items.postDiscountsAmount,",
				"          taxesAmount = items.taxesAmount,",
				"          itemTotalAmount = items.totalAmount,",
				"          void = items.void,",
				"          taxes = items.taxes,",
				"          modifiers = items.modifiers,",
				"          payments = payments,",
				"          customer = customer,",
				"          updatedAt,",
				"          teamId,",
				"          dayPart",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten3",
				"flatten3 foldDown(unroll(taxes),",
				"     mapColumn(",
				"          id,",
				"          name,",
				"          deleted,",
				"          locationId,",
				"          orderTypeId,",
				"          orderTypeName,",
				"          createdByEmployeeId,",
				"          createdByEmployeeName,",
				"          businessDate,",
				"          createdAt,",
				"          closedAt,",
				"          orderNumber,",
				"          tableNumber,",
				"          scheduled,",
				"          releasedAt,",
				"          totalAmount,",
				"          balanceDueAmount,",
				"          checksGratuityAmount,",
				"          checksTotalAmount,",
				"          paymentsAmount,",
				"          balanceAmount,",
				"          guestsName,",
				"          menuItemId,",
				"          itemName,",
				"          itemCreatedAt,",
				"          quantity,",
				"          preDiscountsAmount,",
				"          discountsAmount,",
				"          postDiscountsAmount,",
				"          taxesAmount,",
				"          itemTotalAmount,",
				"          void,",
				"          taxid = taxes.taxId,",
				"          taxName = taxes.taxName,",
				"          percentage = taxes.percentage,",
				"          isInclusive = taxes.isInclusive,",
				"          amount = taxes.amount,",
				"          modifiers,",
				"          payments,",
				"          customer,",
				"          updatedAt,",
				"          teamId,",
				"          dayPart",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> unrollByTaxes",
				"unrollByTaxes foldDown(unroll(payments),",
				"     mapColumn(",
				"          id,",
				"          name,",
				"          deleted,",
				"          locationId,",
				"          orderTypeId,",
				"          orderTypeName,",
				"          createdByEmployeeId,",
				"          createdByEmployeeName,",
				"          businessDate,",
				"          createdAt,",
				"          closedAt,",
				"          orderNumber,",
				"          tableNumber,",
				"          scheduled,",
				"          releasedAt,",
				"          totalAmount,",
				"          balanceDueAmount,",
				"          checksGratuityAmount,",
				"          checksTotalAmount,",
				"          paymentsAmount,",
				"          balanceAmount,",
				"          guestsName,",
				"          menuItemId,",
				"          itemName,",
				"          itemCreatedAt,",
				"          quantity,",
				"          preDiscountsAmount,",
				"          discountsAmount,",
				"          postDiscountsAmount,",
				"          taxesAmount,",
				"          itemTotalAmount,",
				"          void,",
				"          taxid,",
				"          taxName,",
				"          percentage,",
				"          isInclusive,",
				"          taxAmount = amount,",
				"          paymentOptionID = payments.paymentOptionId,",
				"          paymentName = payments.paymentName,",
				"          paymentCreatedAt = payments.createdAt,",
				"          paymentBusinessDate = payments.businessDate,",
				"          paymentAmount = payments.amount,",
				"          surchargesAmount = payments.surchargesAmount,",
				"          tipAmount = payments.tipAmount,",
				"          tipDeductionAmount = payments.tipDeductionAmount,",
				"          tipAppliedToEmployeeId = payments.tipAppliedToEmployeeId,",
				"          stationId = payments.stationId,",
				"          employeeId = payments.employeeId,",
				"          employeeName = payments.employeeName,",
				"          cardType = payments.cardType,",
				"          cardNumber = payments.cardNumber,",
				"          cardholderName = payments.cardholderName,",
				"          updatedAt,",
				"          teamId,",
				"          dayPart",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> unrollByPayments",
				"unrollByPayments sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          each(match(/* All input columns */ true()),",
				"               /* Input name */ $$ = $$)",
				"     )) ~> sink1"
			]
		}
	}
}